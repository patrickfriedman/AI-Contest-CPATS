[
    {
        "instruction": "Create a function to calculate the sum of a sequence of integers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "# Python code\ndef sum_sequence(sequence):\n  sum = 0\n  for num in sequence:\n    sum += num\n  return sum"
    },
    {
        "instruction": "Develop a function that will add two strings",
        "input": "str1 = \"Hello \"\nstr2 = \"world\"",
        "output": "def add_strings(str1, str2):\n    \"\"\"This function takes two strings and returns the sum of them.\"\"\"\n    return str1 + str2\n\nstr1 = \"Hello \"\nstr2 = \"world\"\nsum_of_strings = add_strings(str1, str2)"
    },
    {
        "instruction": "Design a data structure in C++ to store information of a grocery store inventory.",
        "input": "",
        "output": "#include <map>\n#include <string>\n\nclass GroceryStoreInventory {\nprivate:\n    std::map<std::string, int> items;\npublic:\n    void addItems(std::string item, int quantity) {\n        items[item] = quantity;\n    }\n    int getQuantity(std::string item) {\n        if (items.find(item) != items.end()) {\n            return items[item];\n        }\n        return 0;\n    }\n};"
    },
    {
        "instruction": "Implement a sorting algorithm to sort a given array.",
        "input": "[3, 1, 4, 5, 9, 0]",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n \n    # Traverse through all array elements\n    for i in range(n):\n \n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n# Driver code to test above\narr = [3, 1, 4, 5, 9, 0]\n \nbubble_sort(arr)\n \nprint (\"Sorted array is:\")\nfor i in range(len(arr)):\n    print (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Design a Swift application for tracking expenses. The app should have a view for creating new expenses, and a view for displaying all expenses in a table view.",
        "input": "Not applicable",
        "output": "import UIKit\n\nclass ExpenseViewController: UIViewController { \n // MARK: - Variables\n var expenses = [Expense]() \n \n @IBOutlet weak var tableView: UITableView! \n \n // MARK: - UIViewController\n override func viewDidLoad() {\n super.viewDidLoad()\n \n tableView.dataSource = self \n tableView.delegate = self \n setUpNavigationBar() \n } \n \n // MARK: - Private Functions \n func setUpNavigationBar() { \n let addButton = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addButtonTapped)) \n navigationItem.setRightBarButton(addButton, animated: true) \n } \n \n @objc func addButtonTapped() { \n let expenseDetailViewController = ExpenseDetailViewController() \n expenseDetailViewController.delegate = self \n present(expenseDetailViewController, animated: true, completion: nil)\n } \n}\n\nextension ExpenseViewController: UITableViewDataSource { \n func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { \n return expenses.count \n } \n \n func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n let cell = tableView.dequeueReusableCell(withIdentifier: \"expenseCell\", for: indexPath) \n let expense = expenses[indexPath.row] \n cell.textLabel?.text = expense.name \n cell.detailTextLabel?.text = expense.ammount \n return cell \n } \n}\n\nextension ExpenseViewController: UITableViewDelegate { \n func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { \n \n } \n}\n\nextension ExpenseViewController: ExpenseDetailViewControllerDelegate { \n func expenseDetailViewController(_ controller: ExpenseDetailViewController, didCreateExpense expense: Expense) { \n  expenses.append(expense) \n  tableView.reloadData() \n } \n}"
    },
    {
        "instruction": "Create a REST API to convert a UNIX timestamp to human readable date.",
        "input": "Not Applicable",
        "output": "<?php\n$timestamp = $_GET['timestamp'];\n\nif(empty($timestamp)) {\n echo json_encode([\"error\" => \"Please provide a valid UNIX timestamp.\"]);\n die();\n}\n\n$date = date(\"Y-m-d H:i\", $timestamp);\necho json_encode([\"date\" => $date]);\n\n?>"
    },
    {
        "instruction": "Generate a Python code for crawling a website for a specific type of data.",
        "input": "website: www.example.com \ndata to crawl: phone numbers",
        "output": "import requests\nimport re\n\ndef crawl_website_for_phone_numbers(website):\n    response = requests.get(website)\n    phone_numbers = re.findall('\\d{3}-\\d{3}-\\d{4}', response.text)\n    return phone_numbers\n    \nif __name__ == '__main__':\n    print(crawl_website_for_phone_numbers('www.example.com'))"
    },
    {
        "instruction": "Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].",
        "input": "",
        "output": "[x*x for x in [1, 2, 3, 5, 8, 13]]"
    },
    {
        "instruction": "Create a MySQL query to find the most expensive product from the table \"products\".",
        "input": "",
        "output": "SELECT * FROM products ORDER BY price DESC LIMIT 1;"
    },
    {
        "instruction": "Create a data structure in Java for storing and managing books in a library. The data structure should include methods for adding a new book, checking if a particular book is available, and borrowing a book from the library.",
        "input": "Not applicable",
        "output": "public class Library {\n \n // map of books in the library, key is book id, value is Book object\n private Map<String, Book> books;\n \n // Constructor\n public Library() {\n  books = new HashMap<>();\n }\n \n public void addBook(Book book) {\n  books.put(book.getId(), book);\n }\n \n public boolean hasBook(String bookId) {\n  return books.containsKey(bookId);\n }\n \n public void borrowBook(String bookId) {\n  Book book = books.get(bookId);\n  if (book != null) {\n   book.borrow();\n  }\n }\n \n}"
    },
    {
        "instruction": "Design a neural network model to classify emails into spam and non-spam.",
        "input": "",
        "output": "import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Input\n\n# Preparing data\nX_train, y_train, X_test, y_test = get_data() # Returns training and testing datasets\n\n# Building model\ninputs = Input(shape=(X_train.shape[1], ))\nx = Dense(64, activation='relu')(inputs)\nx = Dense(32, activation='relu')(x)\npredictions = Dense(1, activation='sigmoid')(x)\n\n# Compiling model\nmodel = tf.keras.Model(inputs=inputs, outputs=predictions)\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Training the model\nmodel.fit(X_train, y_train, epochs=30, batch_size=32)\n\n# Evaluating the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))"
    },
    {
        "instruction": "Generate a random string of 8 characters that contains at least one number.",
        "input": "Not applicable",
        "output": "function generateRandomString() {\n const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n let str = '';\n for (let i = 0; i < 8; i++) {\n str += chars[Math.floor(Math.random() * chars.length)];\n }\n return str;\n}\n\nconsole.log(generateRandomString()); // \"3xB9uU3d\""
    },
    {
        "instruction": "Create a Java application for sending SMS messages. This application should include a class for configuring the SMS provider.",
        "input": "Not applicable",
        "output": "import org.smslib.Library;\nimport org.smslib.http.SMSHttpProvider;\nimport org.smslib.smsserver.SMSServer;\n\npublic class SMSProvider {\n public void configureProvider(String username, String password) {\n SMSServer.getInstance().setSmsProvider(new SMSHttpProvider());\n SMSServer.getInstance().getSmsProvider().configure(\n \"username=\" + username + \",\" +\n \"password=\" + password,\n Library.getLibrary().getSettings());\n }\n}"
    },
    {
        "instruction": "Create a Java program that generates a list of prime numbers from 2 to a given input.",
        "input": "10",
        "output": "class PrimeNumber {\n public static void main(String a[]) {\n int n = 10;\n int i;\n int j;\n System.out.print(\"Prime numbers between 1 and \" + n + \" are : \");\n for (i = 1; i < n; i++) {\n int counter = 0;\n for (j = i; j >= 1; j--) {\n if (i % j == 0) {\n counter = counter + 1;\n }\n }\n if (counter == 2) {\n System.out.print(i + \" \");\n }\n }\n }\n}\n// Output: Prime numbers between 1 and 10 are : 2 3 5 7"
    },
    {
        "instruction": "Create a JavaScript object containing key-value pairs for each item in the following list:",
        "input": "Apple, Orange, Carrot",
        "output": "const object = {\n    \"Apple\": \"\",\n    \"Orange\": \"\",\n    \"Carrot\": \"\"\n};"
    },
    {
        "instruction": "Generate a python script to perform this action.",
        "input": "Given a string, remove all the consecutive duplicates from the string.\n\nInput: \"AAABBCCCD\"",
        "output": "def remove_duplicates(string): \n    result = \"\" \n    prev = '' \n\n    for char in string:\n        if char != prev: \n            result += char\n            prev = char\n    return result\n\nresult = remove_duplicates(\"AAABBCCCD\")\nprint(result)"
    },
    {
        "instruction": "Edit the following Java code to create a method that calculates the sum of an array of integers.",
        "input": "public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n}",
        "output": "public class Sum {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3, 4, 5};\n        System.out.println(\"The sum is: \" + getSum(numbers));\n    }\n    \n    public static int getSum(int[] numbers) {\n        int sum = 0;\n        for (int number : numbers) {\n            sum += number;\n        }\n        return sum;\n    }\n}"
    },
    {
        "instruction": "Design a Haskell solution for finding the area of a rectangle.",
        "input": "",
        "output": "rectArea :: Num a => a -> a -> a\nrectArea l w = l * w"
    },
    {
        "instruction": "Create a React application to input two numbers and subtract them, displaying the result.",
        "input": "Not applicable",
        "output": "import React, { useState } from \"react\";\n\nconst App = () => {\n  const [input1, setInput1] = useState(0);\n  const [input2, setInput2] = useState(0);\n  const [result, setResult] = useState(0);\n\n  const handleInput1Change = (e) => {\n    setInput1(e.target.value);\n  };\n\n  const handleInput2Change = (e) => {\n    setInput2(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setResult(Number(input1) - Number(input2));\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"number\"\n          value={input1}\n          onChange={handleInput1Change}\n        />\n        -\n        <input type=\"number\" value={input2} onChange={handleInput2Change} />\n        <button type=\"submit\">Calculate</button>\n      </form>\n      <p>Result: {result}</p>\n    </>\n  );\n};\n\nexport default App;"
    },
    {
        "instruction": "Write a python script to generates random numbers between 0 and 9 that are divisible by 3.",
        "input": "",
        "output": "def generate_random_divisible_number():\n    import random\n    while True:\n        # Generate a random number\n        process = random.randint(0, 9)\n        # Check if the number is divisible by 3\n        if process % 3 == 0:\n            # If it is divisible, return it\n            return process"
    },
    {
        "instruction": "Generate a 3x2 matrix filled with random numbers.",
        "input": "",
        "output": "import numpy as np\n\nmatrix = np.random.randint(1, 10, (3, 2))\nprint(matrix)"
    },
    {
        "instruction": "Create a program which subtracts two numbers and prints the result.",
        "input": "110, 15",
        "output": "def subtract(a,b):\n  return a-b\n\nprint(subtract(110, 15)) # Output: 95"
    },
    {
        "instruction": "Create a Django web application that displays a table of stocks with the following columns - name, current stock price, change and percentage change.",
        "input": "NYSE:AAPL, 428.31, -1.51, -0.35\nNYSE:MSFT, 217.31, 2.24, 1.04\nNYSE:AMZN, 3282.19, 5.78, 0.18\nNYSE:FB, 262.83, 4.68, 1.81\nNYSE:GOOG, 1517.11, 5.58, 0.37",
        "output": "import os\n\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'webapp.settings')\ndjango.setup()\n\nfrom stocks.models import Stock\n\nstocks = [\n {'name': 'AAPL', 'price': 428.31, 'change': -1.51, 'percent_change': -0.35},\n {'name': 'MSFT', 'price': 217.31, 'change': 2.24, 'percent_change': 1.04}, \n {'name': 'AMZN', 'price': 3282.19, 'change': 5.78, 'percent_change': 0.18},\n {'name': 'FB', 'price': 262.83, 'change': 4.68, 'percent_change': 1.81},\n {'name': 'GOOG', 'price': 1517.11, 'change': 5.58, 'percent_change': 0.37},\n]\n\nfor stock in stocks: \n Stock.objects.create(**stock)"
    },
    {
        "instruction": "Generate a class in C# that can be used to represent users in a database.",
        "input": "",
        "output": "public class User\n{\n\tpublic int Id { get; set; }\n\tpublic string Name { get; set; }\n\tpublic string EmailAddress { get; set; }\n\n\tpublic User(int id, string name, string emailAddress)\n\t{\n\t\tId = id;\n\t\tName = name;\n\t\tEmailAddress = emailAddress;\n\t}\n}"
    },
    {
        "instruction": "Create a Matlab program that computes the summation of an given list of numbers.",
        "input": "[3, 7, 23, 17]",
        "output": "A = [3, 7, 23, 17]; %Input list\nanswer = sum(A); % Calculation\nfprintf('Summation of the given list is %d', answer); % Output"
    },
    {
        "instruction": "In the function below, write an algorithm to reverse a string.",
        "input": "def reverse_string(string):\n    #TODO",
        "output": "def reverse_string(string):\n    # Reverse the string\n    if len(string) == 0: \n        return string \n    else: \n        return reverse_str(string[1:]) + string[0]"
    },
    {
        "instruction": "Create a code snippet that will generate a random string with length n (n is an input to the program).",
        "input": "",
        "output": "import random\nimport string\n\ndef generateRandomString(n):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(n))"
    }  
]